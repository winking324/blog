<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://winking324.github.io</id>
    <title>Winking</title>
    <updated>2019-06-22T09:34:38.495Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://winking324.github.io"/>
    <link rel="self" href="https://winking324.github.io/atom.xml"/>
    <subtitle>还愣着干啥！点赞啊！</subtitle>
    <logo>https://winking324.github.io/images/avatar.png</logo>
    <icon>https://winking324.github.io/favicon.ico</icon>
    <rights>All rights reserved 2019, Winking</rights>
    <entry>
        <title type="html"><![CDATA[Ubuntu 下 Samba 安装与配置]]></title>
        <id>https://winking324.github.io/post/ubuntu-samba</id>
        <link href="https://winking324.github.io/post/ubuntu-samba">
        </link>
        <updated>2019-02-19T09:25:51.000Z</updated>
        <summary type="html"><![CDATA[<p>SMB（Server Messages Block，信息服务块）是一种在局域网上共享文件和打印机的一种通信协议，它为局域网内的不同计算机之间提供文件及打印机等资源的共享服务。</p>
]]></summary>
        <content type="html"><![CDATA[<p>SMB（Server Messages Block，信息服务块）是一种在局域网上共享文件和打印机的一种通信协议，它为局域网内的不同计算机之间提供文件及打印机等资源的共享服务。</p>
<!-- more -->
<p>Samba 是在 Linux 和 UNIX 系统上实现 SMB 协议的一个免费软件，由服务器及客户端程序构成。</p>
<ol>
<li>
<p>安装 Samba 服务；</p>
<p><code>sudo apt-get install samba</code></p>
</li>
<li>
<p>添加系统用户 <code>share</code>；</p>
<p><code>sudo adduser share</code></p>
</li>
<li>
<p>为该用户创建 Samba 密码；</p>
<p><code>sudo smbpasswd -a share</code></p>
</li>
<li>
<p>修改 Samba 配置，设置更新目录；</p>
<p><code>sudo vi /etc/samba/smb.conf</code></p>
<pre><code>[share]
   comment = Share
   path = /data/share
   public = yes
   writable = yes
   guest ok = no
   valid user = share
</code></pre>
</li>
<li>
<p>重启 Samba 服务；</p>
<p><code>sudo service samba restart</code></p>
</li>
<li>
<p>客户端连接；</p>
<p>在文件浏览器中，打开 <code>smb://192.168.100.110</code> 以访问对应的 Samba 文件服务器。</p>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Raspberry Pi 初始化]]></title>
        <id>https://winking324.github.io/post/raspberry-pi-init</id>
        <link href="https://winking324.github.io/post/raspberry-pi-init">
        </link>
        <updated>2019-02-19T09:14:29.000Z</updated>
        <summary type="html"><![CDATA[<p>树莓派是一款基于 ARM 的微型电脑主板，具备所有 PC 的基本功能。默认情况下其系统基于 Linux，可以在树莓派上安装一些简单的服务，提供访问。</p>
]]></summary>
        <content type="html"><![CDATA[<p>树莓派是一款基于 ARM 的微型电脑主板，具备所有 PC 的基本功能。默认情况下其系统基于 Linux，可以在树莓派上安装一些简单的服务，提供访问。</p>
<!-- more -->
<h1 id="1-安装系统">1 安装系统</h1>
<ol>
<li>从官网<a href="https://www.raspberrypi.org/downloads/">下载页面</a>下载系统镜像文件；</li>
<li>下载镜像烧录软件，Mac 上可以使用 <a href="https://www.balena.io/etcher/">balenaEtcher</a>；</li>
<li>将镜像烧录到 SD 卡上；</li>
<li>将 SD 卡查到树莓派上，上电启动；</li>
</ol>
<p>注意:</p>
<ol>
<li>树莓派默认情况下只支持从 SD 卡上启动系统；</li>
<li>树莓派 3 及以上版本支持从 U盘启动系统，但是需要先用 SD 卡启动后修改 boot 参数；</li>
<li>树莓派 3b+ 及以上版本支持 1000 Mbps 网卡；</li>
</ol>
<h1 id="2-u盘启动系统">2 U盘启动系统</h1>
<p>可以通过外部 U盘或者 SSD 进入系统，三种情况下有对应的<a href="https://www.raspberrypi.org/forums/viewtopic.php?t=199414">系统速度测试</a>，默认的 SD 卡速度最慢。</p>
<p>所以这里<a href="https://www.raspberrypi.org/documentation/hardware/raspberrypi/bootmodes/msd.md">使用 U盘启动系统</a>（实际因为手头 U盘太多，SD 卡反而没几个）。</p>
<ol>
<li>使用 SD 卡进入系统；</li>
<li>执行 <code>echo program_usb_boot_mode=1 | sudo tee -a /boot/config.txt</code> 写入配置；</li>
<li>执行 <code>sudo reboot</code> 重启系统；</li>
<li>执行 <code>vcgencmd otp_dump | grep 17:</code> 查看是否成功，成功结果应该为 <code>17:3020000a</code>；</li>
<li>执行 <code>sudo poweroff</code> 关机，并断电；</li>
<li>拔出 SD 卡，插入烧录好系统的 U盘，上电启动；</li>
<li>进入 U盘系统；</li>
</ol>
<h1 id="3-设置键盘布局">3 设置键盘布局</h1>
<p>默认情况下，键盘布局为英式键盘布局，而我们常用的是美式键盘布局，很多键位是不一样的，所以需要更改键盘布局。</p>
<ol>
<li>执行 <code>sudo raspi-config</code>；</li>
<li>找到键盘布局更改选项，并执行；</li>
<li>选择 Generic 101-key pc；</li>
<li>选择 Other；</li>
<li>选择国家为 English(US)；</li>
<li>选择布局为 English(US)；</li>
<li>选择 The default for the keyboard layout；</li>
<li>选择 No compose key；</li>
<li>执行 <code>sudo reboot</code> 重启系统；</li>
</ol>
<h1 id="4-打开-ssh">4 打开 SSH</h1>
<p>默认情况下，SSH 是关闭的，即不能远程登录，所以需要打开 SSH 以提供远程登录。</p>
<ol>
<li>执行 <code>sudo raspi-config</code>；</li>
<li>找到 SSH 选项，选择打开；</li>
</ol>
<h1 id="5-配置-wifi">5 配置 WiFi</h1>
<ol>
<li>执行 <code>sudo raspi-config</code>；</li>
<li>找到 WiFi 选项；</li>
<li>输入 WiFi 名称和密码；</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Ubuntu 下 Jenkins 安装与配置]]></title>
        <id>https://winking324.github.io/post/ubuntu-jenkins</id>
        <link href="https://winking324.github.io/post/ubuntu-jenkins">
        </link>
        <updated>2018-10-25T08:45:32.000Z</updated>
        <summary type="html"><![CDATA[<p>Jenkins 是一个开源软件项目，是基于 Java 开发的一种持续集成工具，用于监控持续重复的工作，旨在提供一个开放易用的软件平台，使软件的持续集成变成可能。</p>
]]></summary>
        <content type="html"><![CDATA[<p>Jenkins 是一个开源软件项目，是基于 Java 开发的一种持续集成工具，用于监控持续重复的工作，旨在提供一个开放易用的软件平台，使软件的持续集成变成可能。</p>
<!-- more -->
<h1 id="1-安装-java">1 安装 Java</h1>
<p>Jenkins 依赖于 Java， 所以需要<a href="http://www.webupd8.org/2012/09/install-oracle-java-8-in-ubuntu-via-ppa.html">安装 JDK 环境</a>。</p>
<ol>
<li>
<p>增加 java 源（只能装 Java8 版本，其他版本 Jenkins 不支持）；</p>
<pre><code class="language-sh">sudo add-apt-repository ppa:webupd8team/java
sudo apt update
</code></pre>
</li>
<li>
<p>安装 java 8；</p>
<pre><code class="language-sh">sudo apt install oracle-java8-installer
</code></pre>
<p>确认 License：</p>
<p><img src="https://winking324.github.io/post-images/1561193202986.png" alt=""></p>
<p><img src="https://winking324.github.io/post-images/1561193220461.png" alt=""></p>
</li>
<li>
<p>安装 java 环境设置；</p>
<pre><code class="language-sh">sudo apt install oracle-java8-set-default
</code></pre>
</li>
<li>
<p>验证 java 版本 &gt;= 1.8；</p>
<pre><code class="language-sh">java -version
</code></pre>
<p>出现以下结果：</p>
<pre><code class="language-sh">java version &quot;1.8.0_191&quot;
Java(TM) SE Runtime Environment (build 1.8.0_191-b12)
Java HotSpot(TM) 64-Bit Server VM (build 25.191-b12, mixed mode)
</code></pre>
</li>
<li>
<p>打开编辑以下文件，设置 java 环境；</p>
<pre><code class="language-sh">sudo vi /etc/environment
</code></pre>
</li>
<li>
<p>输入 Java 环境设置，保存并关闭文件；</p>
<pre><code class="language-sh">JAVA_HOME=&quot;/usr/lib/jvm/java-8-oracle/&quot;
JRE_HOME=&quot;/usr/lib/jvm/java-8-oracle/jre/&quot;
</code></pre>
</li>
<li>
<p>更新环境设置；</p>
<pre><code class="language-sh">source /etc/environment
</code></pre>
</li>
</ol>
<h1 id="2-安装-jenkins">2 安装 Jenkins</h1>
<pre><code class="language-sh"># 1. 增加 Jenkins 源；
wget -q -O - https://pkg.jenkins.io/debian/jenkins-ci.org.key | sudo apt-key add -
sudo sh -c 'echo deb http://pkg.jenkins.io/debian-stable binary/ &gt; /etc/apt/sources.list.d/jenkins.list'
sudo apt-get update

# 2. 安装 Jenkins；
sudo apt-get install jenkins
</code></pre>
<h1 id="3-初始化-jenkins">3 初始化 Jenkins</h1>
<ol>
<li>
<p>修改 Jenkins 配置；</p>
<pre><code class="language-sh"># 1. 创建工作路径（方便迁移管理）；
sudo mkdir /data/jenkins
sudo chown -R jenkins:jenkins /data/jenkins

# 2. 打开编辑环境变量文件；
sudo vi /etc/environment

# 3. 配置 JENKINS_HOME 环境变量，并保存退出
JENKINS_HOME=&quot;/data/jenkins&quot;

# 4. 更新配置；
source /etc/environment

# 5. 重启 Jenkins 服务；
sudo service jenkins restart
</code></pre>
</li>
<li>
<p>查看初始密码；</p>
<pre><code class="language-sh">sudo cat $JENKINS_HOME/secrets/initialAdminPassword
</code></pre>
</li>
<li>
<p>登录 Jenkins；</p>
<p>打开浏览器，输入 <code>http://192.168.100.110:8080</code> 登录到 Jenkins，第一次登录需要初始密码。</p>
<p><img src="https://winking324.github.io/post-images/1561193245385.png" alt=""></p>
</li>
<li>
<p>安装插件，选择<code>建议安装的插件</code>即可，选择后等待安装；</p>
<p><img src="https://winking324.github.io/post-images/1561193273723.png" alt=""></p>
<p><img src="https://winking324.github.io/post-images/1561193302049.png" alt=""></p>
</li>
<li>
<p>创建Admin用户，点击保存并完成；</p>
<p><img src="https://winking324.github.io/post-images/1561193315181.png" alt=""></p>
</li>
<li>
<p>实例配置，点击保存并完成；</p>
<p><img src="https://winking324.github.io/post-images/1561193323980.png" alt=""></p>
</li>
<li>
<p>结束配置；</p>
<p><img src="https://winking324.github.io/post-images/1561193332769.png" alt=""></p>
</li>
<li>
<p>进入 Jenkins；</p>
<p><img src="https://winking324.github.io/post-images/1561193343039.png" alt=""></p>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Ubuntu 下 MySQL 安装与配置]]></title>
        <id>https://winking324.github.io/post/ubuntu-mysql</id>
        <link href="https://winking324.github.io/post/ubuntu-mysql">
        </link>
        <updated>2018-10-20T08:27:17.000Z</updated>
        <summary type="html"><![CDATA[<p>MySQL 所使用的 SQL 语言是用于访问数据库的最常用标准化语言。MySQL 软件采用了双授权政策，分为社区版和商业版，由于其体积小、速度快、总体拥有成本低，尤其是开放源码这一特点，一般中小型网站的开发都选择 MySQL 作为网站数据库。</p>
]]></summary>
        <content type="html"><![CDATA[<p>MySQL 所使用的 SQL 语言是用于访问数据库的最常用标准化语言。MySQL 软件采用了双授权政策，分为社区版和商业版，由于其体积小、速度快、总体拥有成本低，尤其是开放源码这一特点，一般中小型网站的开发都选择 MySQL 作为网站数据库。</p>
<!-- more -->
<h1 id="1-安装-mysql">1 安装 MySQL</h1>
<ol>
<li>
<p>执行以下命令，安装 mysql；</p>
<pre><code class="language-sh">sudo apt install mysql-server
</code></pre>
</li>
<li>
<p>查看初始用户名密码；</p>
<pre><code class="language-sh">sudo cat /etc/mysql/debian.cnf
</code></pre>
<p><img src="https://winking324.github.io/post-images/1561192105213.png" alt=""></p>
</li>
<li>
<p>登录数据库；</p>
<pre><code class="language-sh">mysql -udebian-sys-maint -h127.0.0.1 -P3306 -pDrxCn6t800jO2AIL
</code></pre>
<p><img src="https://winking324.github.io/post-images/1561192117492.png" alt=""></p>
</li>
<li>
<p>创建用户，并设置密码；</p>
<pre><code class="language-mysql">GRANT ALL ON *.* TO 'u'@'127.0.0.1' IDENTIFIED BY 'u';
</code></pre>
</li>
<li>
<p>赋予用户u创建grant权限；</p>
<pre><code class="language-mysql">use mysql;
update user set grant_priv='Y' where user='u';
</code></pre>
</li>
<li>
<p>刷新；</p>
<pre><code class="language-mysql">flush privileges;
</code></pre>
</li>
<li>
<p>退出并用创建的新用户登录；</p>
<pre><code class="language-sh">mysql -uu -h127.0.0.1 -P3306 -pu
</code></pre>
<p><img src="https://winking324.github.io/post-images/1561192134492.png" alt=""></p>
</li>
</ol>
<h1 id="2-外网访问权限">2 外网访问权限</h1>
<p>MySQL 安装后，默认情况下只能本机访问，如果需要其他机器的访问权限，需要以下步骤。</p>
<ol>
<li>
<p>设置绑定地址；</p>
<pre><code class="language-sh"># 1. 编辑配置文件；
sudo vi /etc/mysql/mysql.conf.d/mysqld.cnf

# 2. 修改 bind-address 为 0.0.0.0
bind-address            = 0.0.0.0

# 3. 保存退出;
# 4. 重启 MySQL 服务；
sudo service mysql restart

# 5. 检查绑定地址是否正确；
sudo netstat -antp | grep mysql

# 6. 如果结果如下，则正确；
# tcp        0      0 0.0.0.0:3306            0.0.0.0:*               LISTEN      3826/mysqld
</code></pre>
</li>
<li>
<p>登录 MySQL，为对应访问用户开放权限；</p>
<pre><code class="language-sh"># 1. 登录 MySQL；
mysql -uu -h127.0.0.1 -P3306 -pu

# 2. 假设要访问用户的 IP 为 192.168.1.100，用户名为 u，密码为 u；
GRANT ALL ON *.* TO 'u'@'192.168.1.100' IDENTIFIED BY 'u';
</code></pre>
</li>
</ol>
<h1 id="3-创建数据库">3. 创建数据库</h1>
<p>创建 HttpRunnerManager 需要的数据库。</p>
<ol>
<li>
<p>登录 MySQL；</p>
<pre><code class="language-sh">mysql -uu -h127.0.0.1 -P3306 -pu
</code></pre>
</li>
<li>
<p>创建名称为 HttpRunner 的数据库；</p>
<pre><code class="language-mysql">CREATE DATABASE IF NOT EXISTS HttpRunner DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;
</code></pre>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Ubuntu 环境初始化]]></title>
        <id>https://winking324.github.io/post/ubuntu-init</id>
        <link href="https://winking324.github.io/post/ubuntu-init">
        </link>
        <updated>2018-10-19T08:16:42.000Z</updated>
        <summary type="html"><![CDATA[<p>初始化环境，安装一些常用的工具，设置远程登录等。</p>
]]></summary>
        <content type="html"><![CDATA[<p>初始化环境，安装一些常用的工具，设置远程登录等。</p>
<!-- more -->
<h1 id="1-配置-ssh">1 配置 SSH</h1>
<p>为了服务器的安全，一般需要关闭密码登录，使用证书登录。</p>
<h2 id="11-生成证书">1.1 生成证书</h2>
<p>在本地机器（非虚拟机上），生成公钥和私钥。</p>
<p>按照以下步骤生成。</p>
<pre><code class="language-sh"># 1. 生成秘钥；
ssh-keygen -t rsa -b 4096 -C &quot;your-email@email.com&quot;

# 2. 出现以下提示后，输入对应文件名，以保存秘钥；
# Generating public/private rsa key pair.
# Enter file in which to save the key (/Users/name/.ssh/id_rsa): devops.pem
# Enter passphrase (empty for no passphrase):
# Enter same passphrase again:
# Your identification has been saved in devops.pem.
# Your public key has been saved in devops.pem.pub.
</code></pre>
<h2 id="12-虚拟机增加公钥">1.2 虚拟机增加公钥</h2>
<p>将刚才生成的公钥，拷贝到虚拟机环境上。由于 VirtualBox 上不能进行复制粘贴，所以先使用密码登录服务器，配置好公钥访问后，再关闭密码登录。</p>
<p>按照以下步骤操作。</p>
<pre><code class="language-sh"># 1. ssh 登录虚拟机环境；
ssh u@192.168.100.110

# 2. 创建 authorized_keys 文件；
mkdir ~/.ssh
cd ~/.ssh
vi authorized_keys

# 3. 复制生成的公钥 devops.pem.pub 内容，并粘贴到 authorized_keys 文件后，保存并关闭；

# 4. 验证私钥登录；
ssh -i devops.pem u@192.168.100.110
</code></pre>
<h2 id="13-关闭密码登录">1.3 关闭密码登录</h2>
<p>按照以下步骤操作。</p>
<pre><code class="language-sh"># 1. 编辑 ssh 配置文件；
sudo vi /etc/ssh/sshd_config

# 2. 找到文件中 PasswordAuthentication 对应描述位置；

# 3. 修改 PasswordAuthentication 如下，并保存关闭文件；
PasswordAuthentication no

# 4. 重新加载配置；
sudo service ssh reload

# 5. 尝试密码登录失败；
ssh u@192.168.100.110
</code></pre>
<h1 id="2-切换-apt-源">2 切换 apt 源</h1>
<p>为了下载安装软件更方便，速度更快，我们往往在使用 Linux 系统时修改 apt 源为国内的源。这里更新为阿里云的源。</p>
<p>按照以下步骤更新源。</p>
<pre><code class="language-sh"># 1. 备份原有 source.list；
cd /etc/apt/
sudo mv sources.list sources.list.backup

# 2. 编辑 source.list；
sudo vi source.list

# 3. 输入以下内容；
deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse

deb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse

deb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse

deb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse

deb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse

# 4. 更新源；
sudo apt update
</code></pre>
<h1 id="3-oh-my-zsh">3 Oh My Zsh</h1>
<p>Shell 的类型有很多种，Linux 下默认的是 Bash，虽然 Bash 的功能已经很强大，但对于以懒惰为美德的程序员来说，Bash 的提示功能不够强大，界面也不够炫，并非理想工具。</p>
<p>而 ZSH 的功能极其强大，只是配置过于复杂，起初只有极客才在用。后来，有个穷极无聊的程序员可能是实在看不下去广大猿友一直只能使用单调的 Bash, 于是他创建了一个名为 <a href="https://ohmyz.sh/">oh-my-zsh</a> 的开源项目。</p>
<p>按照以下步骤安装 oh-my-zsh。</p>
<pre><code class="language-sh"># 1. 安装 zsh；
sudo apt install zsh

# 2. 安装 oh-my-zsh;
sh -c &quot;$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;

# 3. 配置加载环境；
sudo vi /etc/zsh/zprofile

# 4. 输入以下内容，加载 /etc/profile.d/*.sh 内容，保存退出；
if [ -d /etc/profile.d ]; then
  for i in /etc/profile.d/*.sh; do
    if [ -r $i ]; then
      . $i
    fi
  done
  unset i
fi

# 5. 加载配置；
source /etc/zsh/zprofile
</code></pre>
<p>安装好 oh-my-zsh 后，可以选择性安装一些插件，增强功能。</p>
<h2 id="31-autojump">3.1 autojump</h2>
<p>autojump 可以记录历史路径操作，快速进入某一个路径。</p>
<p>安装步骤如下：</p>
<pre><code class="language-sh"># 1. 安装 autojump；
sudo apt install autojump

# 2. 初始化 autojump；
source /usr/share/autojump/autojump.zsh

# 3. 在 oh-my-zsh 中增加配置；
vi ~/.zshrc

# 4. 找到 plugins 描述位置，修改为以下内容后，保存退出；
plugins=(git, autojump)

# 5. 重新加载配置；
source ~/.zshrc
</code></pre>
<p>使用时，只需要 <code>j data</code> 就可以跳转到历史中路径中包含 <code>data</code> 的路径中。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[VirtualBox 迁移]]></title>
        <id>https://winking324.github.io/post/virtualbox-migrate</id>
        <link href="https://winking324.github.io/post/virtualbox-migrate">
        </link>
        <updated>2018-10-19T07:55:56.000Z</updated>
        <summary type="html"><![CDATA[<p>当虚拟机需要在办公室和家里同时使用时，可以将虚拟机文件，拷贝到移动硬盘上，在办公室和家里都以该文件创建环境即可。</p>
]]></summary>
        <content type="html"><![CDATA[<p>当虚拟机需要在办公室和家里同时使用时，可以将虚拟机文件，拷贝到移动硬盘上，在办公室和家里都以该文件创建环境即可。</p>
<!-- more -->
<ol>
<li>
<p>点击新建，创建虚拟机，填写名称等信息。选择使用已有的虚拟硬盘文件，并选择对应的硬盘文件，点击创建；</p>
<p><img src="https://winking324.github.io/post-images/1561190019003.png" alt=""></p>
</li>
<li>
<p>选择刚创建的虚拟机，并点击设置；</p>
<p><img src="https://winking324.github.io/post-images/1561190028782.png" alt=""></p>
</li>
<li>
<p>修改网络配置，添加 Host-Only 模式；</p>
<p><img src="https://winking324.github.io/post-images/1561190039617.png" alt=""></p>
</li>
<li>
<p>修改存储配置，添加之前创建的虚拟磁盘；</p>
<p><img src="https://winking324.github.io/post-images/1561190049647.png" alt=""></p>
</li>
<li>
<p>开机并登陆，检查网络和磁盘状态；</p>
<p><img src="https://winking324.github.io/post-images/1561190060306.png" alt=""></p>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[VirtualBox 配置虚拟硬盘]]></title>
        <id>https://winking324.github.io/post/virtualbox-disk</id>
        <link href="https://winking324.github.io/post/virtualbox-disk">
        </link>
        <updated>2018-10-19T06:20:23.000Z</updated>
        <summary type="html"><![CDATA[<p>一般工作环境，不建议与系统环境放在一起。所以我们通过挂载磁盘方式，增加磁盘空间，并设置工作环境。</p>
]]></summary>
        <content type="html"><![CDATA[<p>一般工作环境，不建议与系统环境放在一起。所以我们通过挂载磁盘方式，增加磁盘空间，并设置工作环境。</p>
<!-- more -->
<h1 id="1-创建虚拟硬盘">1 创建虚拟硬盘</h1>
<ol>
<li>
<p>关机已经打开的虚拟机；</p>
</li>
<li>
<p>点击设置，并进入存储页面，并选择添加虚拟硬盘；</p>
<p><img src="https://winking324.github.io/post-images/1561184554078.png" alt=""></p>
</li>
<li>
<p>选择创建新的虚拟盘；</p>
<p><img src="https://winking324.github.io/post-images/1561184568359.png" alt=""></p>
</li>
<li>
<p>选择类型，并继续；</p>
<p><img src="https://winking324.github.io/post-images/1561184581108.png" alt=""></p>
</li>
<li>
<p>选择分配模式，并继续；</p>
<p><img src="https://winking324.github.io/post-images/1561184593217.png" alt=""></p>
</li>
<li>
<p>选择存储位置，并调整大小，点击创建；</p>
<p><img src="https://winking324.github.io/post-images/1561184603974.png" alt=""></p>
</li>
<li>
<p>创建成功；</p>
<p><img src="https://winking324.github.io/post-images/1561184615522.png" alt=""></p>
</li>
</ol>
<h1 id="2-磁盘分区">2 磁盘分区</h1>
<ol>
<li>
<p>开机并登录系统；</p>
<p><img src="https://winking324.github.io/post-images/1561184641855.png" alt=""></p>
</li>
<li>
<p>查看当前磁盘信息；</p>
<p><img src="https://winking324.github.io/post-images/1561184651517.png" alt=""></p>
</li>
<li>
<p>操作对应的磁盘，输入 m 查看帮助；</p>
<p><img src="https://winking324.github.io/post-images/1561184660552.png" alt=""></p>
</li>
<li>
<p>支持的磁盘操作；</p>
<p><img src="https://winking324.github.io/post-images/1561184671799.png" alt=""></p>
</li>
<li>
<p>输入 p，查看当前分区；</p>
<p><img src="https://winking324.github.io/post-images/1561184682439.png" alt=""></p>
</li>
<li>
<p>输入 n，创建分区，选择主分区还是扩展分区，默认主分区；</p>
<p><img src="https://winking324.github.io/post-images/1561184693348.png" alt=""></p>
</li>
<li>
<p>选择磁盘分区在该硬盘中的序号；</p>
<p><img src="https://winking324.github.io/post-images/1561184702415.png" alt=""></p>
</li>
<li>
<p>磁盘起始位置；</p>
<p><img src="https://winking324.github.io/post-images/1561184715648.png" alt=""></p>
</li>
<li>
<p>磁盘结束位置；</p>
<p><img src="https://winking324.github.io/post-images/1561184735442.png" alt=""></p>
</li>
<li>
<p>创建分区结束，按 p 显示分区信息；</p>
<p><img src="https://winking324.github.io/post-images/1561184747832.png" alt=""></p>
</li>
<li>
<p>输入 w，保存并退出；</p>
<p><img src="https://winking324.github.io/post-images/1561184761053.png" alt=""></p>
</li>
</ol>
<h1 id="3-格式化分区">3 格式化分区</h1>
<ol>
<li>
<p>格式化创建的分区，并等待格式化完成；</p>
<p><img src="https://winking324.github.io/post-images/1561184771160.png" alt=""></p>
</li>
</ol>
<h1 id="4-挂载硬盘">4 挂载硬盘</h1>
<ol>
<li>
<p>创建 <code>/data</code> 目录；</p>
<p><img src="https://winking324.github.io/post-images/1561184810771.png" alt=""></p>
</li>
<li>
<p>挂载硬盘到 <code>/data</code> 路径下；</p>
<p><img src="https://winking324.github.io/post-images/1561184820459.png" alt=""></p>
</li>
</ol>
<h1 id="5-开机自动挂载硬盘">5 开机自动挂载硬盘</h1>
<ol>
<li>
<p>编辑 <code>/etc/fstab</code> 文件；</p>
<p><img src="https://winking324.github.io/post-images/1561184831895.png" alt=""></p>
</li>
<li>
<p>在文件中，追加以下内容；</p>
<p><img src="https://winking324.github.io/post-images/1561184841113.png" alt=""></p>
</li>
<li>
<p>保存并退出；</p>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[VirtualBox 配置 Ubuntu 主机网络]]></title>
        <id>https://winking324.github.io/post/virtualbox-hostonly</id>
        <link href="https://winking324.github.io/post/virtualbox-hostonly">
        </link>
        <updated>2018-10-19T02:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>在公司等企业网中，一般不使用 DHCP 自动获取 IP 地址，所以一般虚拟机创建后会有无法联网的问题。如果使用 NAT 方式，则又无法从主机链接到虚拟机环境。这里介绍使用 Host-Only（主机网络）方式进行主机和虚拟机之间链接。</p>
]]></summary>
        <content type="html"><![CDATA[<p>在公司等企业网中，一般不使用 DHCP 自动获取 IP 地址，所以一般虚拟机创建后会有无法联网的问题。如果使用 NAT 方式，则又无法从主机链接到虚拟机环境。这里介绍使用 Host-Only（主机网络）方式进行主机和虚拟机之间链接。</p>
<!-- more -->
<h1 id="1-创建主机网络">1 创建主机网络</h1>
<ol>
<li>
<p>关机已经打开的虚拟机；</p>
</li>
<li>
<p>全局工具，选择主机网络管理器；</p>
<p><img src="https://winking324.github.io/post-images/1561182841555.png" alt=""></p>
</li>
<li>
<p>创建主机网络；</p>
<p><img src="https://winking324.github.io/post-images/1561182861315.png" alt=""></p>
</li>
<li>
<p>修改主机网络属性；</p>
<p><img src="https://winking324.github.io/post-images/1561182870810.png" alt=""></p>
</li>
</ol>
<h1 id="2-配置服务器网卡">2 配置服务器网卡</h1>
<ol>
<li>
<p>选择需要配置的服务器，并点击设置；</p>
<p><img src="https://winking324.github.io/post-images/1561182886261.png" alt=""></p>
</li>
<li>
<p>在网络中，点击网卡 2，进行以下设置；</p>
<p><img src="https://winking324.github.io/post-images/1561182898489.png" alt=""></p>
</li>
</ol>
<h1 id="3-配置服务器网络">3 配置服务器网络</h1>
<ol>
<li>
<p>启动服务器并登陆；</p>
<p><img src="https://winking324.github.io/post-images/1561182910432.png" alt=""></p>
</li>
<li>
<p>查看当前网卡的信息，这里新增的网卡为 <code>enp0s8</code>；</p>
<p><img src="https://winking324.github.io/post-images/1561182920307.png" alt=""></p>
</li>
<li>
<p>进入 <code>/etc/netplan</code> 目录，并打开编辑 <code>50-cloud-init.yaml</code> 文件；</p>
<p><img src="https://winking324.github.io/post-images/1561182933107.png" alt=""></p>
</li>
<li>
<p>输入以下配置内容，保存关闭；</p>
<p><img src="https://winking324.github.io/post-images/1561182942706.png" alt=""></p>
</li>
<li>
<p>更新网络配置，并查看；</p>
<p><img src="https://winking324.github.io/post-images/1561182953055.png" alt=""></p>
</li>
<li>
<p>测试网络；</p>
<p><img src="https://winking324.github.io/post-images/1561182962337.png" alt=""></p>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[VirtualBox 安装 Ubuntu 18.04]]></title>
        <id>https://winking324.github.io/post/virtualbox-ubuntu</id>
        <link href="https://winking324.github.io/post/virtualbox-ubuntu">
        </link>
        <updated>2018-10-18T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>虚拟机软件有很多种，这里使用 VirtualBox 作为主要工具，来说明如何安装 Ubuntu 18.04。</p>
]]></summary>
        <content type="html"><![CDATA[<p>虚拟机软件有很多种，这里使用 VirtualBox 作为主要工具，来说明如何安装 Ubuntu 18.04。</p>
<!-- more -->
<h1 id="1-下载-ubuntu-镜像">1 下载 Ubuntu 镜像</h1>
<ul>
<li><a href="http://releases.ubuntu.com/14.04/ubuntu-14.04.5-server-amd64.iso.torrent">Ubuntu 14.04.5 Server 64 bit</a></li>
<li><a href="http://releases.ubuntu.com/16.04/ubuntu-16.04.5-server-amd64.iso.torrent">Ubuntu 16.04.5 Server 64 bit</a></li>
<li><a href="http://releases.ubuntu.com/18.04/ubuntu-18.04.1-live-server-amd64.iso.torrent">Ubuntu 18.04.1 Server 64 bit</a></li>
</ul>
<h1 id="2-安装">2 安装</h1>
<ol>
<li>
<p>点击新建，输入名称并配置各个选项后，点击创建；</p>
<p><img src="https://winking324.github.io/post-images/1561180826920.png" alt=""></p>
</li>
<li>
<p>选择虚拟机存储位置和存储大小，之后点击创建；</p>
<p><img src="https://winking324.github.io/post-images/1561181047927.png" alt=""></p>
</li>
<li>
<p>选择刚创建的虚拟机，进行设置，在存储的光驱控制器上，选择已经下载好的 Ubuntu 镜像文件；</p>
<p><img src="https://winking324.github.io/post-images/1561181065977.png" alt=""></p>
</li>
<li>
<p>选择刚创建的虚拟机，点击启动按钮，进入系统安装界面，选择语言后回车；</p>
<p><img src="https://winking324.github.io/post-images/1561181083153.png" alt=""></p>
</li>
<li>
<p>选择键盘布局，回车；</p>
</li>
</ol>
<p><img src="https://winking324.github.io/post-images/1561181099645.png" alt=""></p>
<ol start="6">
<li>
<p>选择安装，回车；</p>
<p><img src="https://winking324.github.io/post-images/1561181114897.png" alt=""></p>
</li>
<li>
<p>选择网卡，回车；</p>
<p><img src="https://winking324.github.io/post-images/1561181141509.png" alt=""></p>
</li>
<li>
<p>如果有代理，输入代理地址，回车；</p>
<p><img src="https://winking324.github.io/post-images/1561181154682.png" alt=""></p>
</li>
<li>
<p>默认，回车；</p>
<p><img src="https://winking324.github.io/post-images/1561181165536.png" alt=""></p>
</li>
<li>
<p>使用整个硬盘，回车；</p>
<p><img src="https://winking324.github.io/post-images/1561181178995.png" alt=""></p>
</li>
<li>
<p>初始化硬盘，回车；</p>
<p><img src="https://winking324.github.io/post-images/1561181189517.png" alt=""></p>
</li>
<li>
<p>默认，回车；</p>
<p><img src="https://winking324.github.io/post-images/1561181199754.png" alt=""></p>
</li>
<li>
<p>选择继续，进行硬盘初始化，回车；</p>
<p><img src="https://winking324.github.io/post-images/1561181209910.png" alt=""></p>
</li>
<li>
<p>输入用户名和密码等，回车；</p>
<p><img src="https://winking324.github.io/post-images/1561181221443.png" alt=""></p>
</li>
<li>
<p>空格选择需要安装的应用，回车继续；</p>
<p><img src="https://winking324.github.io/post-images/1561181238681.png" alt=""></p>
</li>
<li>
<p>等待安装结束；</p>
<p><img src="https://winking324.github.io/post-images/1561181248013.png" alt=""></p>
</li>
<li>
<p>安装结束，重启系统；</p>
<p><img src="https://winking324.github.io/post-images/1561181258294.png" alt=""></p>
</li>
<li>
<p>回车移除安装镜像，并自动重启；</p>
<p><img src="https://winking324.github.io/post-images/1561181267710.png" alt=""></p>
</li>
<li>
<p>安装成功，进入登录界面，输入配置的用户名和密码；</p>
<p><img src="https://winking324.github.io/post-images/1561181278437.png" alt=""></p>
</li>
<li>
<p>进入 Ubuntu 系统；</p>
<p><img src="https://winking324.github.io/post-images/1561181288951.png" alt=""></p>
</li>
</ol>
]]></content>
    </entry>
</feed>