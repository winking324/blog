<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://winking324.github.io</id>
    <title>Winking</title>
    <updated>2019-07-01T02:40:53.435Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://winking324.github.io"/>
    <link rel="self" href="https://winking324.github.io/atom.xml"/>
    <subtitle>还愣着干啥！点赞啊！</subtitle>
    <logo>https://winking324.github.io/images/avatar.png</logo>
    <icon>https://winking324.github.io/favicon.ico</icon>
    <rights>All rights reserved 2019, Winking</rights>
    <entry>
        <title type="html"><![CDATA[WSGI + uWSGI + uwsgi]]></title>
        <id>https://winking324.github.io/post/uwsgi</id>
        <link href="https://winking324.github.io/post/uwsgi">
        </link>
        <updated>2019-06-28T05:36:18.000Z</updated>
        <summary type="html"><![CDATA[<p>一直以来，给外部系统提供服务，都是使用 RESTful API 方式。但是对于更多的用户来说，更喜欢的是使用浏览器直接打开页面，点击几个按钮来操作。所以在此基础上，学习了一下 Flask，接触到了 uWSGI，这里进行总结一下。</p>
]]></summary>
        <content type="html"><![CDATA[<p>一直以来，给外部系统提供服务，都是使用 RESTful API 方式。但是对于更多的用户来说，更喜欢的是使用浏览器直接打开页面，点击几个按钮来操作。所以在此基础上，学习了一下 Flask，接触到了 uWSGI，这里进行总结一下。</p>
<!-- more -->
<h2 id="wsgi">WSGI</h2>
<p>说到 uWSGI，需要先理解一下 WSGI。</p>
<p>对于一个 Web 服务来说，处理用户的请求的过程如下：</p>
<ol>
<li>用户使用浏览器，发起 HTTP 请求；</li>
<li>Web 服务器根据接收到请求，生成对应的 HTML 文档；</li>
<li>Web 服务器将 HTML 文档，作为 Response 发送给浏览器；</li>
<li>浏览器收到 HTML 文档，渲染展示出来给用户；</li>
</ol>
<p>对于静态页面，即 HTML 文档内容固定不变，可以用现在很成熟的 Nginx 等 Web 服务器来实现。</p>
<p>对于动态页面，即 HTML 文档需要根据不同用户请求的不同内容来生成，就需要自己来实现 Web 服务器了。但是如果对于基本的 HTTP 协议都去开发一遍的话，工作量就太大了。</p>
<p>所以更好的方式是，由 Nginx 这些成熟的 Web 服务器来负责接收处理 HTTP 等请求，而我们自己的应用程序，专心负责生成对应的 HTML 文档，这就是 WSGI 的意义了。</p>
<p>WSGI（Web Server Gateway Interface），是 Python 应用程序（或框架）与 Web 服务器之间的一种接口规范。只要遵循这个接口规范，开发者实现的 Python 应用程序就可以和 Web 服务器进行对接。</p>
<p>WSGI 是专指 Python 和 Web 服务器之间的接口规范，同时还有其他例如 CGI、FastCGI、Servlet等规范，其对比如下：</p>
<table>
<thead>
<tr>
<th>规范</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>CGI</td>
<td>Common Gateway Interface，最早出现的外部扩展应用程序与 Web 服务器交互的标准接口。</td>
</tr>
<tr>
<td>FastCGI</td>
<td>FastCGI 是 CGI 的优化版本，CGI 每次执行都需要 fork 一次，效率很低，而 FastCGI 是常驻类型，且支持分布式的运算，大大提高了性能。</td>
</tr>
<tr>
<td>Servlet</td>
<td>Java 专用的外部扩展应用程序与 Web 服务器交互的标准接口。</td>
</tr>
<tr>
<td>WSGI</td>
<td>Python 专用的外部扩展应用程序与 Web 服务器交互的标准接口。</td>
</tr>
</tbody>
</table>
<h2 id="uwsgi">uWSGI</h2>
<p>uWSGI 是一个遵循 WSGI 规范的 Web 服务器，它实现了 WSGI、uwsgi、HTTP 等协议。</p>
<h2 id="uwsgi-2">uwsgi</h2>
<p>uwsgi 是 uWSGI 服务器使用的本地协议。</p>
<p>uwsgi 是一个二进制协议，可以携带任何类型的数据。一个 uwsgi 分组的前 4 个字节，描述了这个分组包含的数据类型。</p>
<p>由于 uwsgi 使用二进制来存储数据，比 FastCGI 这种字符存储数据，在存储空间和解析速度上有很大的优势。</p>
<h2 id="参考地址">参考地址</h2>
<ul>
<li><a href="https://www.jianshu.com/p/29f66eb4e55a">说说我对 WSGI 的理解</a></li>
<li><a href="https://uwsgi-docs-zh.readthedocs.io/zh_CN/latest/index.html">uWSGI 项目文档</a></li>
<li><a href="https://www.cnblogs.com/Xjng/p/aa4dd23918359c6414d54e4b972e9081.html">Nginx+uWSGI+Django原理</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[斐讯 N1 盒子刷机]]></title>
        <id>https://winking324.github.io/post/reinstall-n1</id>
        <link href="https://winking324.github.io/post/reinstall-n1">
        </link>
        <updated>2019-06-16T09:50:25.000Z</updated>
        <summary type="html"><![CDATA[<p>现在市面上的各种盒子，广告很多，体验很差。618 入了一个明基投影仪，打算买一个盒子的前提下，刚好好多朋友推荐斐讯 N1 盒子，优点是性能很强大，价格便宜，刷机后非常给力。</p>
]]></summary>
        <content type="html"><![CDATA[<p>现在市面上的各种盒子，广告很多，体验很差。618 入了一个明基投影仪，打算买一个盒子的前提下，刚好好多朋友推荐斐讯 N1 盒子，优点是性能很强大，价格便宜，刷机后非常给力。</p>
<!-- more -->
<p>所以从拼多多上入了一个 N1 盒子 + T1 原装遥控器 + 刷机线，总价 119.9 元（斐讯在淘宝/京东/咸鱼/拼多多上都已经被屏蔽，需要搜索 N1 盒子来查找）。</p>
<h2 id="1-刷机准备">1 刷机准备</h2>
<p>设备：</p>
<ol>
<li>N1 盒子一台；</li>
<li>刷机线一根；</li>
<li>显示器一台；</li>
<li>网线一根；</li>
<li>鼠标一个；</li>
<li>Windows 电脑一台；</li>
<li>网络环境；</li>
</ol>
<p>工具：</p>
<ol>
<li>系统降级工具；</li>
<li>进入线刷模式工具；</li>
<li>刷机软件：UsbBurningTool；</li>
<li>刷机系统 Rom；</li>
<li>驱动人生；</li>
</ol>
<h2 id="2-系统降级">2 系统降级</h2>
<p>由于 N1 最新的系统固件，已经被加密，所以在不降级的前提下，无法进行刷机。</p>
<ol>
<li>
<p>N1 连接显示器/网线/鼠标/电源，开机，进入以下界面；</p>
<p><img src="https://winking324.github.io/post-images/1561197081153.jpg" alt=""></p>
</li>
<li>
<p>鼠标连续点击固件版本这行字，直到出现下方“打开adb”；</p>
</li>
<li>
<p>连接刷机线，注意 N1 盒子是对应 HDMI 旁边 USB 口；</p>
</li>
<li>
<p>在 Windows 上，打开驱动人生，打开外设驱动，安装安卓驱动；</p>
<p><img src="https://winking324.github.io/post-images/1561340510118.jpg" alt=""></p>
</li>
<li>
<p>在 Windows 电脑上，解压 《N1-T1降刷机助手v1.1版本》压缩包；</p>
</li>
<li>
<p>进入解压后的目录中，运行 <code>T1_N1降级工具v1.1.exe</code>；</p>
<p><img src="https://winking324.github.io/post-images/1561340522634.jpg" alt=""></p>
</li>
<li>
<p>选择降级设备为 N1，设备 IP 为 N1 盒子对应的 IP，点击开始降级；</p>
</li>
<li>
<p>没有意外的话，最终工作状态会显示为降级成功；</p>
</li>
<li>
<p>断开 USB 和电源，重启 N1 盒子；</p>
</li>
<li>
<p>重启后，进入初始界面，但是上面固件版本仍然为原来的版本，这个不要在意，因为刷机的固件版本，跟显示的这个固件版本，是两个东西，只要降级工具里面显示成功即可；</p>
</li>
</ol>
<h2 id="3-刷机">3 刷机</h2>
<p>系统降级成功后，可以选择需要的 Rom 进行刷机，常见的 Rom 有很多，大家可以自行百度查找适合自己的 Rom，这里以常见的《斐讯盒子N1_YYFROM讯飞语音实用版190421》进行示例。</p>
<ol>
<li>
<p>连接刷机线；</p>
</li>
<li>
<p>安装 UsbBurningTool，软件会自动安装 USB 驱动；</p>
<p><img src="https://winking324.github.io/post-images/1561340535289.jpg" alt=""></p>
</li>
<li>
<p>打开 UsbBurningTool，在“文件”中加载刷机包，加载完成后，点击开始按钮（<strong>注意擦除 FLASH 和擦除Bootloader 前面的对号要去掉</strong>）；</p>
<p><img src="https://winking324.github.io/post-images/1561340546055.jpg" alt=""></p>
</li>
<li>
<p>解压《使N1进入线刷模式》压缩包，双击运行 <code>reboot_to_usb_burn/进入线刷模式.bat</code> 脚本；</p>
</li>
<li>
<p>这时候盒子会进入重启状态（如果显示器有内容显示，先不要管），对应 Windows 电脑会有 USB 设备插入的提示声；</p>
</li>
<li>
<p>XP 以上 Windows 系统，需要手动添加驱动；</p>
</li>
<li>
<p>在我的电脑上右键，选择管理，并打开设备管理器，然后在操作中，添加过时硬件；</p>
<p><img src="https://winking324.github.io/post-images/1561340557223.jpg" alt=""></p>
<p><img src="https://winking324.github.io/post-images/1561340568358.jpg" alt=""></p>
<p><img src="https://winking324.github.io/post-images/1561340578604.jpg" alt=""></p>
<p><img src="https://winking324.github.io/post-images/1561340586822.jpg" alt=""></p>
</li>
<li>
<p>驱动安装完成后，N1 进行断电重启；</p>
</li>
<li>
<p>重启后，重新运行  <code>reboot_to_usb_burn/进入线刷模式.bat</code> 脚本；</p>
</li>
<li>
<p>这时候，UsbBurningTool 可以识别到设备，并开始进行刷机；</p>
<p><img src="https://winking324.github.io/post-images/1561340596193.jpg" alt=""></p>
</li>
<li>
<p>刷机完成后，关掉 UsbBurningTool，并断电重启 N1，之后可以进入刷机的系统；</p>
<p><img src="https://winking324.github.io/post-images/1561340605374.jpg" alt=""></p>
</li>
</ol>
<h2 id="4-参考地址">4 参考地址</h2>
<ul>
<li><a href="https://www.right.com.cn/forum/thread-318044-1-1.html">斐讯天天链N1刷机小白教程</a></li>
<li><a href="https://www.right.com.cn/forum/thread-336688-1-1.html">T1_N1一键降级工具v1.1版本</a></li>
<li><a href="https://pan.baidu.com/s/11ll1an5qHuYKTIIotuRuwA">其他工具(czez)</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Ubuntu 下 Let's Encrypt 生成 HTTPS 证书]]></title>
        <id>https://winking324.github.io/post/lets-encrypt</id>
        <link href="https://winking324.github.io/post/lets-encrypt">
        </link>
        <updated>2019-06-13T09:38:31.000Z</updated>
        <summary type="html"><![CDATA[<p>Let's Encrypt 这个认证机构，可以提供期限是 90 天的免费证书，且可以无限次更新，本文介绍如何使用 Let's Encrypt 来使自己的网站支持 HTTPS。</p>
]]></summary>
        <content type="html"><![CDATA[<p>Let's Encrypt 这个认证机构，可以提供期限是 90 天的免费证书，且可以无限次更新，本文介绍如何使用 Let's Encrypt 来使自己的网站支持 HTTPS。</p>
<!-- more -->
<p>想要创建一个 HTTPS 的网站，需要以下几个步骤：</p>
<ol>
<li>一个域名；</li>
<li>一个外网可以访问的服务器；</li>
<li>一个认证的证书；</li>
</ol>
<h1 id="1-下载并初始化-certbot">1 下载并初始化 Certbot</h1>
<p>Certbot 是 Let's Encrypt 官方提供的工具，直接通过工具可以自动化生成证书。</p>
<pre><code class="language-sh"># 下载 Certbot
wget https://dl.eff.org/certbot-auto

# 设置为可执行程序
chmod a+x certbot-auto

# 移动到官方推荐目录下
sudo mv certbot-auto /usr/local/bin

# 修改用户及用户组
sudo chown root:root /usr/local/bin/certbot-auto

# 执行初始化
sudo certbot-auto
</code></pre>
<p>由于初始化需要安装很多 Python 的库，这个过程可能会比较漫长，如果需要，可以通过优化 Python 的源来进行加速。</p>
<pre><code class="language-sh"># 创建 pip 配置目录
sudo mkdir ~/.pip

# 创建 pip 配置
touch ~/.pip/pip.conf

# 输入以下内容到 pip.conf 中
[global]
index-url=http://mirrors.aliyun.com/pypi/simple/
[install]
trusted-host=mirrors.aliyun.com
</code></pre>
<h1 id="2-创建-nginx-服务">2 创建 Nginx 服务</h1>
<p>在漫长的初始化过程中，可以先执行下一步操作。在生成证书时，一般有两种模式可以选择：</p>
<ul>
<li>webroot：在已有的 HTTP 服务中增加 HTTPS；</li>
<li>standalone：帮助创建带有 HTTPS 的服务；</li>
</ul>
<p>这里我们选择使用 webroot 模式，所以我们需要事先准备好一个 HTTP 服务。</p>
<pre><code class="language-sh"># 安装 Nginx
sudo apt install nginx

# 创建 HTTP Root 路径
sudo mkdir /var/www/winking

# 修改 Nginx 配置
sudo vi /etc/nginx/sites-enabled/default

# 将 root 修改为
root /var/www/winking;

# 保存配置，并重新加载
sudo systemctl reload nginx
</code></pre>
<h1 id="3-创建-certbot-配置">3 创建 Certbot 配置</h1>
<p>这个时候，Certbot 应该已经初始化完成了，可以生产证书文件了。</p>
<p>首先，我们创建 Certbot 的配置，来指导生产证书文件。</p>
<pre><code class="language-sh"># 创建配置文件路径
sudo mkdir -p /etc/letsencrypt/configs

# 创建配置文件，并编辑
sudo vi /etc/letsencrypt/configs/winking.io.conf

# 输入配置内容
domains = winking.io
rsa-key-size = 2048
email = your-email@example.com
text = True
authenticator = webroot
webroot-path = /var/www/winking
</code></pre>
<p>其中，webroot-path 是我们在上一步中创建的 HTTP Root 路径。在生成证书的过程中，Certbot 会在这个路径中自动生成一个文件，来进行验证域名配置的正确性。</p>
<h1 id="4-生成证书">4 生成证书</h1>
<p>调用 Certbot，并根据配置来生成证书。</p>
<pre><code class="language-sh">sudo certbot-auto -c /etc/letsencrypt/configs/winking.io.conf certonly
</code></pre>
<p>运行顺利，则会在 <code>/etc/letsencrypt/live/winking.io/</code> 这个路径下，生成以下几个文件：</p>
<ul>
<li>cert.pem</li>
<li>privkey.pem</li>
<li>chain.pem</li>
<li>fullchain.pem</li>
</ul>
<h1 id="5-配置-https">5 配置 HTTPS</h1>
<p>顺利生成证书后，我们需要将 Nginx 的 HTTP 服务，修改为 HTTPS 服务。</p>
<pre><code class="language-sh"># 修改 Nginx 配置文件
sudo vi /etc/nginx/sites-enabled/default

# 增加以下内容
listen 443 ssl default_server;
listen [::]:443 ssl default_server;
ssl_certificate /etc/letsencrypt/live/miai.winking.io/fullchain.pem;
ssl_certificate_key /etc/letsencrypt/live/miai.winking.io/privkey.pem;

# 保存配置，并重新加载
sudo systemctl reload nginx
</code></pre>
<p>这样，就可以用 HTTPS 的方式打开你的网站了。</p>
<h1 id="6-参考">6 参考</h1>
<ul>
<li><a href="https://ksmx.me/letsencrypt-ssl-https/">LET'S ENCRYPT 给网站加 HTTPS 完全指南</a></li>
<li><a href="https://www.linuxidc.com/Linux/2017-03/142248.htm">部署Let’s Encrypt免费SSL证书&amp;&amp;自动续期</a></li>
<li><a href="https://www.jianshu.com/p/3c67562b88a5">使用let's encrypt工具配置Nginx HTTPS</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Ubuntu 下 Samba 安装与配置]]></title>
        <id>https://winking324.github.io/post/ubuntu-samba</id>
        <link href="https://winking324.github.io/post/ubuntu-samba">
        </link>
        <updated>2019-02-19T09:25:51.000Z</updated>
        <summary type="html"><![CDATA[<p>SMB（Server Messages Block，信息服务块）是一种在局域网上共享文件和打印机的一种通信协议，它为局域网内的不同计算机之间提供文件及打印机等资源的共享服务。</p>
]]></summary>
        <content type="html"><![CDATA[<p>SMB（Server Messages Block，信息服务块）是一种在局域网上共享文件和打印机的一种通信协议，它为局域网内的不同计算机之间提供文件及打印机等资源的共享服务。</p>
<!-- more -->
<p>Samba 是在 Linux 和 UNIX 系统上实现 SMB 协议的一个免费软件，由服务器及客户端程序构成。</p>
<ol>
<li>
<p>安装 Samba 服务；</p>
<p><code>sudo apt-get install samba</code></p>
</li>
<li>
<p>添加系统用户 <code>share</code>；</p>
<p><code>sudo adduser share</code></p>
</li>
<li>
<p>为该用户创建 Samba 密码；</p>
<p><code>sudo smbpasswd -a share</code></p>
</li>
<li>
<p>修改 Samba 配置，设置更新目录；</p>
<p><code>sudo vi /etc/samba/smb.conf</code></p>
<pre><code>[share]
   comment = Share
   path = /data/share
   public = yes
   writable = yes
   guest ok = no
   valid user = share
</code></pre>
</li>
<li>
<p>重启 Samba 服务；</p>
<p><code>sudo service samba restart</code></p>
</li>
<li>
<p>客户端连接；</p>
<p>在文件浏览器中，打开 <code>smb://192.168.100.110</code> 以访问对应的 Samba 文件服务器。</p>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Raspberry Pi 初始化]]></title>
        <id>https://winking324.github.io/post/raspberry-pi-init</id>
        <link href="https://winking324.github.io/post/raspberry-pi-init">
        </link>
        <updated>2019-02-19T09:14:29.000Z</updated>
        <summary type="html"><![CDATA[<p>树莓派是一款基于 ARM 的微型电脑主板，具备所有 PC 的基本功能。默认情况下其系统基于 Linux，可以在树莓派上安装一些简单的服务，提供访问。</p>
]]></summary>
        <content type="html"><![CDATA[<p>树莓派是一款基于 ARM 的微型电脑主板，具备所有 PC 的基本功能。默认情况下其系统基于 Linux，可以在树莓派上安装一些简单的服务，提供访问。</p>
<!-- more -->
<h1 id="1-安装系统">1 安装系统</h1>
<ol>
<li>从官网<a href="https://www.raspberrypi.org/downloads/">下载页面</a>下载系统镜像文件；</li>
<li>下载镜像烧录软件，Mac 上可以使用 <a href="https://www.balena.io/etcher/">balenaEtcher</a>；</li>
<li>将镜像烧录到 SD 卡上；</li>
<li>将 SD 卡查到树莓派上，上电启动；</li>
</ol>
<p>注意:</p>
<ol>
<li>树莓派默认情况下只支持从 SD 卡上启动系统；</li>
<li>树莓派 3 及以上版本支持从 U盘启动系统，但是需要先用 SD 卡启动后修改 boot 参数；</li>
<li>树莓派 3b+ 及以上版本支持 1000 Mbps 网卡；</li>
</ol>
<h1 id="2-u盘启动系统">2 U盘启动系统</h1>
<p>可以通过外部 U盘或者 SSD 进入系统，三种情况下有对应的<a href="https://www.raspberrypi.org/forums/viewtopic.php?t=199414">系统速度测试</a>，默认的 SD 卡速度最慢。</p>
<p>所以这里<a href="https://www.raspberrypi.org/documentation/hardware/raspberrypi/bootmodes/msd.md">使用 U盘启动系统</a>（实际因为手头 U盘太多，SD 卡反而没几个）。</p>
<ol>
<li>使用 SD 卡进入系统；</li>
<li>执行 <code>echo program_usb_boot_mode=1 | sudo tee -a /boot/config.txt</code> 写入配置；</li>
<li>执行 <code>sudo reboot</code> 重启系统；</li>
<li>执行 <code>vcgencmd otp_dump | grep 17:</code> 查看是否成功，成功结果应该为 <code>17:3020000a</code>；</li>
<li>执行 <code>sudo poweroff</code> 关机，并断电；</li>
<li>拔出 SD 卡，插入烧录好系统的 U盘，上电启动；</li>
<li>进入 U盘系统；</li>
</ol>
<h1 id="3-设置键盘布局">3 设置键盘布局</h1>
<p>默认情况下，键盘布局为英式键盘布局，而我们常用的是美式键盘布局，很多键位是不一样的，所以需要更改键盘布局。</p>
<ol>
<li>执行 <code>sudo raspi-config</code>；</li>
<li>找到键盘布局更改选项，并执行；</li>
<li>选择 Generic 101-key pc；</li>
<li>选择 Other；</li>
<li>选择国家为 English(US)；</li>
<li>选择布局为 English(US)；</li>
<li>选择 The default for the keyboard layout；</li>
<li>选择 No compose key；</li>
<li>执行 <code>sudo reboot</code> 重启系统；</li>
</ol>
<h1 id="4-打开-ssh">4 打开 SSH</h1>
<p>默认情况下，SSH 是关闭的，即不能远程登录，所以需要打开 SSH 以提供远程登录。</p>
<ol>
<li>执行 <code>sudo raspi-config</code>；</li>
<li>找到 SSH 选项，选择打开；</li>
</ol>
<h1 id="5-配置-wifi">5 配置 WiFi</h1>
<ol>
<li>执行 <code>sudo raspi-config</code>；</li>
<li>找到 WiFi 选项；</li>
<li>输入 WiFi 名称和密码；</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Ubuntu 下 Jenkins 安装与配置]]></title>
        <id>https://winking324.github.io/post/ubuntu-jenkins</id>
        <link href="https://winking324.github.io/post/ubuntu-jenkins">
        </link>
        <updated>2018-10-25T08:45:32.000Z</updated>
        <summary type="html"><![CDATA[<p>Jenkins 是一个开源软件项目，是基于 Java 开发的一种持续集成工具，用于监控持续重复的工作，旨在提供一个开放易用的软件平台，使软件的持续集成变成可能。</p>
]]></summary>
        <content type="html"><![CDATA[<p>Jenkins 是一个开源软件项目，是基于 Java 开发的一种持续集成工具，用于监控持续重复的工作，旨在提供一个开放易用的软件平台，使软件的持续集成变成可能。</p>
<!-- more -->
<h1 id="1-安装-java">1 安装 Java</h1>
<p>Jenkins 依赖于 Java， 所以需要<a href="http://www.webupd8.org/2012/09/install-oracle-java-8-in-ubuntu-via-ppa.html">安装 JDK 环境</a>。</p>
<ol>
<li>
<p>增加 java 源（只能装 Java8 版本，其他版本 Jenkins 不支持）；</p>
<pre><code class="language-sh">sudo add-apt-repository ppa:webupd8team/java
sudo apt update
</code></pre>
</li>
<li>
<p>安装 java 8；</p>
<pre><code class="language-sh">sudo apt install oracle-java8-installer
</code></pre>
<p>确认 License：</p>
<p><img src="https://winking324.github.io/post-images/1561193202986.png" alt=""></p>
<p><img src="https://winking324.github.io/post-images/1561193220461.png" alt=""></p>
</li>
<li>
<p>安装 java 环境设置；</p>
<pre><code class="language-sh">sudo apt install oracle-java8-set-default
</code></pre>
</li>
<li>
<p>验证 java 版本 &gt;= 1.8；</p>
<pre><code class="language-sh">java -version
</code></pre>
<p>出现以下结果：</p>
<pre><code class="language-sh">java version &quot;1.8.0_191&quot;
Java(TM) SE Runtime Environment (build 1.8.0_191-b12)
Java HotSpot(TM) 64-Bit Server VM (build 25.191-b12, mixed mode)
</code></pre>
</li>
<li>
<p>打开编辑以下文件，设置 java 环境；</p>
<pre><code class="language-sh">sudo vi /etc/environment
</code></pre>
</li>
<li>
<p>输入 Java 环境设置，保存并关闭文件；</p>
<pre><code class="language-sh">JAVA_HOME=&quot;/usr/lib/jvm/java-8-oracle/&quot;
JRE_HOME=&quot;/usr/lib/jvm/java-8-oracle/jre/&quot;
</code></pre>
</li>
<li>
<p>更新环境设置；</p>
<pre><code class="language-sh">source /etc/environment
</code></pre>
</li>
</ol>
<h1 id="2-安装-jenkins">2 安装 Jenkins</h1>
<pre><code class="language-sh"># 1. 增加 Jenkins 源；
wget -q -O - https://pkg.jenkins.io/debian/jenkins-ci.org.key | sudo apt-key add -
sudo sh -c 'echo deb http://pkg.jenkins.io/debian-stable binary/ &gt; /etc/apt/sources.list.d/jenkins.list'
sudo apt-get update

# 2. 安装 Jenkins；
sudo apt-get install jenkins
</code></pre>
<h1 id="3-初始化-jenkins">3 初始化 Jenkins</h1>
<ol>
<li>
<p>修改 Jenkins 配置；</p>
<pre><code class="language-sh"># 1. 创建工作路径（方便迁移管理）；
sudo mkdir /data/jenkins
sudo chown -R jenkins:jenkins /data/jenkins

# 2. 打开编辑环境变量文件；
sudo vi /etc/environment

# 3. 配置 JENKINS_HOME 环境变量，并保存退出
JENKINS_HOME=&quot;/data/jenkins&quot;

# 4. 更新配置；
source /etc/environment

# 5. 重启 Jenkins 服务；
sudo service jenkins restart
</code></pre>
</li>
<li>
<p>查看初始密码；</p>
<pre><code class="language-sh">sudo cat $JENKINS_HOME/secrets/initialAdminPassword
</code></pre>
</li>
<li>
<p>登录 Jenkins；</p>
<p>打开浏览器，输入 <code>http://192.168.100.110:8080</code> 登录到 Jenkins，第一次登录需要初始密码。</p>
<p><img src="https://winking324.github.io/post-images/1561193245385.png" alt=""></p>
</li>
<li>
<p>安装插件，选择<code>建议安装的插件</code>即可，选择后等待安装；</p>
<p><img src="https://winking324.github.io/post-images/1561193273723.png" alt=""></p>
<p><img src="https://winking324.github.io/post-images/1561193302049.png" alt=""></p>
</li>
<li>
<p>创建Admin用户，点击保存并完成；</p>
<p><img src="https://winking324.github.io/post-images/1561193315181.png" alt=""></p>
</li>
<li>
<p>实例配置，点击保存并完成；</p>
<p><img src="https://winking324.github.io/post-images/1561193323980.png" alt=""></p>
</li>
<li>
<p>结束配置；</p>
<p><img src="https://winking324.github.io/post-images/1561193332769.png" alt=""></p>
</li>
<li>
<p>进入 Jenkins；</p>
<p><img src="https://winking324.github.io/post-images/1561193343039.png" alt=""></p>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Ubuntu 下 MySQL 安装与配置]]></title>
        <id>https://winking324.github.io/post/ubuntu-mysql</id>
        <link href="https://winking324.github.io/post/ubuntu-mysql">
        </link>
        <updated>2018-10-20T08:27:17.000Z</updated>
        <summary type="html"><![CDATA[<p>MySQL 所使用的 SQL 语言是用于访问数据库的最常用标准化语言。MySQL 软件采用了双授权政策，分为社区版和商业版，由于其体积小、速度快、总体拥有成本低，尤其是开放源码这一特点，一般中小型网站的开发都选择 MySQL 作为网站数据库。</p>
]]></summary>
        <content type="html"><![CDATA[<p>MySQL 所使用的 SQL 语言是用于访问数据库的最常用标准化语言。MySQL 软件采用了双授权政策，分为社区版和商业版，由于其体积小、速度快、总体拥有成本低，尤其是开放源码这一特点，一般中小型网站的开发都选择 MySQL 作为网站数据库。</p>
<!-- more -->
<h1 id="1-安装-mysql">1 安装 MySQL</h1>
<ol>
<li>
<p>执行以下命令，安装 mysql；</p>
<pre><code class="language-sh">sudo apt install mysql-server
</code></pre>
</li>
<li>
<p>查看初始用户名密码；</p>
<pre><code class="language-sh">sudo cat /etc/mysql/debian.cnf
</code></pre>
<p><img src="https://winking324.github.io/post-images/1561192105213.png" alt=""></p>
</li>
<li>
<p>登录数据库；</p>
<pre><code class="language-sh">mysql -udebian-sys-maint -h127.0.0.1 -P3306 -pDrxCn6t800jO2AIL
</code></pre>
<p><img src="https://winking324.github.io/post-images/1561192117492.png" alt=""></p>
</li>
<li>
<p>创建用户，并设置密码；</p>
<pre><code class="language-mysql">GRANT ALL ON *.* TO 'u'@'127.0.0.1' IDENTIFIED BY 'u';
</code></pre>
</li>
<li>
<p>赋予用户u创建grant权限；</p>
<pre><code class="language-mysql">use mysql;
update user set grant_priv='Y' where user='u';
</code></pre>
</li>
<li>
<p>刷新；</p>
<pre><code class="language-mysql">flush privileges;
</code></pre>
</li>
<li>
<p>退出并用创建的新用户登录；</p>
<pre><code class="language-sh">mysql -uu -h127.0.0.1 -P3306 -pu
</code></pre>
<p><img src="https://winking324.github.io/post-images/1561192134492.png" alt=""></p>
</li>
</ol>
<h1 id="2-外网访问权限">2 外网访问权限</h1>
<p>MySQL 安装后，默认情况下只能本机访问，如果需要其他机器的访问权限，需要以下步骤。</p>
<ol>
<li>
<p>设置绑定地址；</p>
<pre><code class="language-sh"># 1. 编辑配置文件；
sudo vi /etc/mysql/mysql.conf.d/mysqld.cnf

# 2. 修改 bind-address 为 0.0.0.0
bind-address            = 0.0.0.0

# 3. 保存退出;
# 4. 重启 MySQL 服务；
sudo service mysql restart

# 5. 检查绑定地址是否正确；
sudo netstat -antp | grep mysql

# 6. 如果结果如下，则正确；
# tcp        0      0 0.0.0.0:3306            0.0.0.0:*               LISTEN      3826/mysqld
</code></pre>
</li>
<li>
<p>登录 MySQL，为对应访问用户开放权限；</p>
<pre><code class="language-sh"># 1. 登录 MySQL；
mysql -uu -h127.0.0.1 -P3306 -pu

# 2. 假设要访问用户的 IP 为 192.168.1.100，用户名为 u，密码为 u；
GRANT ALL ON *.* TO 'u'@'192.168.1.100' IDENTIFIED BY 'u';
</code></pre>
</li>
</ol>
<h1 id="3-创建数据库">3. 创建数据库</h1>
<p>创建 HttpRunnerManager 需要的数据库。</p>
<ol>
<li>
<p>登录 MySQL；</p>
<pre><code class="language-sh">mysql -uu -h127.0.0.1 -P3306 -pu
</code></pre>
</li>
<li>
<p>创建名称为 HttpRunner 的数据库；</p>
<pre><code class="language-mysql">CREATE DATABASE IF NOT EXISTS HttpRunner DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;
</code></pre>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Ubuntu 环境初始化]]></title>
        <id>https://winking324.github.io/post/ubuntu-init</id>
        <link href="https://winking324.github.io/post/ubuntu-init">
        </link>
        <updated>2018-10-19T08:16:42.000Z</updated>
        <summary type="html"><![CDATA[<p>初始化环境，安装一些常用的工具，设置远程登录等。</p>
]]></summary>
        <content type="html"><![CDATA[<p>初始化环境，安装一些常用的工具，设置远程登录等。</p>
<!-- more -->
<h1 id="1-配置-ssh">1 配置 SSH</h1>
<p>为了服务器的安全，一般需要关闭密码登录，使用证书登录。</p>
<h2 id="11-生成证书">1.1 生成证书</h2>
<p>在本地机器（非虚拟机上），生成公钥和私钥。</p>
<p>按照以下步骤生成。</p>
<pre><code class="language-sh"># 1. 生成秘钥；
ssh-keygen -t rsa -b 4096 -C &quot;your-email@email.com&quot;

# 2. 出现以下提示后，输入对应文件名，以保存秘钥；
# Generating public/private rsa key pair.
# Enter file in which to save the key (/Users/name/.ssh/id_rsa): devops.pem
# Enter passphrase (empty for no passphrase):
# Enter same passphrase again:
# Your identification has been saved in devops.pem.
# Your public key has been saved in devops.pem.pub.
</code></pre>
<h2 id="12-虚拟机增加公钥">1.2 虚拟机增加公钥</h2>
<p>将刚才生成的公钥，拷贝到虚拟机环境上。由于 VirtualBox 上不能进行复制粘贴，所以先使用密码登录服务器，配置好公钥访问后，再关闭密码登录。</p>
<p>按照以下步骤操作。</p>
<pre><code class="language-sh"># 1. ssh 登录虚拟机环境；
ssh u@192.168.100.110

# 2. 创建 authorized_keys 文件；
mkdir ~/.ssh
cd ~/.ssh
vi authorized_keys

# 3. 复制生成的公钥 devops.pem.pub 内容，并粘贴到 authorized_keys 文件后，保存并关闭；

# 4. 验证私钥登录；
ssh -i devops.pem u@192.168.100.110
</code></pre>
<h2 id="13-关闭密码登录">1.3 关闭密码登录</h2>
<p>按照以下步骤操作。</p>
<pre><code class="language-sh"># 1. 编辑 ssh 配置文件；
sudo vi /etc/ssh/sshd_config

# 2. 找到文件中 PasswordAuthentication 对应描述位置；

# 3. 修改 PasswordAuthentication 如下，并保存关闭文件；
PasswordAuthentication no

# 4. 重新加载配置；
sudo service ssh reload

# 5. 尝试密码登录失败；
ssh u@192.168.100.110
</code></pre>
<h1 id="2-切换-apt-源">2 切换 apt 源</h1>
<p>为了下载安装软件更方便，速度更快，我们往往在使用 Linux 系统时修改 apt 源为国内的源。这里更新为阿里云的源。</p>
<p>按照以下步骤更新源。</p>
<pre><code class="language-sh"># 1. 备份原有 source.list；
cd /etc/apt/
sudo mv sources.list sources.list.backup

# 2. 编辑 source.list；
sudo vi source.list

# 3. 输入以下内容；
deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse

deb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse

deb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse

deb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse

deb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse

# 4. 更新源；
sudo apt update
</code></pre>
<h1 id="3-oh-my-zsh">3 Oh My Zsh</h1>
<p>Shell 的类型有很多种，Linux 下默认的是 Bash，虽然 Bash 的功能已经很强大，但对于以懒惰为美德的程序员来说，Bash 的提示功能不够强大，界面也不够炫，并非理想工具。</p>
<p>而 ZSH 的功能极其强大，只是配置过于复杂，起初只有极客才在用。后来，有个穷极无聊的程序员可能是实在看不下去广大猿友一直只能使用单调的 Bash, 于是他创建了一个名为 <a href="https://ohmyz.sh/">oh-my-zsh</a> 的开源项目。</p>
<p>按照以下步骤安装 oh-my-zsh。</p>
<pre><code class="language-sh"># 1. 安装 zsh；
sudo apt install zsh

# 2. 安装 oh-my-zsh;
sh -c &quot;$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;

# 3. 配置加载环境；
sudo vi /etc/zsh/zprofile

# 4. 输入以下内容，加载 /etc/profile.d/*.sh 内容，保存退出；
if [ -d /etc/profile.d ]; then
  for i in /etc/profile.d/*.sh; do
    if [ -r $i ]; then
      . $i
    fi
  done
  unset i
fi

# 5. 加载配置；
source /etc/zsh/zprofile
</code></pre>
<p>安装好 oh-my-zsh 后，可以选择性安装一些插件，增强功能。</p>
<h2 id="31-autojump">3.1 autojump</h2>
<p>autojump 可以记录历史路径操作，快速进入某一个路径。</p>
<p>安装步骤如下：</p>
<pre><code class="language-sh"># 1. 安装 autojump；
sudo apt install autojump

# 2. 初始化 autojump；
source /usr/share/autojump/autojump.zsh

# 3. 在 oh-my-zsh 中增加配置；
vi ~/.zshrc

# 4. 找到 plugins 描述位置，修改为以下内容后，保存退出；
plugins=(git, autojump)

# 5. 重新加载配置；
source ~/.zshrc
</code></pre>
<p>使用时，只需要 <code>j data</code> 就可以跳转到历史中路径中包含 <code>data</code> 的路径中。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[VirtualBox 迁移]]></title>
        <id>https://winking324.github.io/post/virtualbox-migrate</id>
        <link href="https://winking324.github.io/post/virtualbox-migrate">
        </link>
        <updated>2018-10-19T07:55:56.000Z</updated>
        <summary type="html"><![CDATA[<p>当虚拟机需要在办公室和家里同时使用时，可以将虚拟机文件，拷贝到移动硬盘上，在办公室和家里都以该文件创建环境即可。</p>
]]></summary>
        <content type="html"><![CDATA[<p>当虚拟机需要在办公室和家里同时使用时，可以将虚拟机文件，拷贝到移动硬盘上，在办公室和家里都以该文件创建环境即可。</p>
<!-- more -->
<ol>
<li>
<p>点击新建，创建虚拟机，填写名称等信息。选择使用已有的虚拟硬盘文件，并选择对应的硬盘文件，点击创建；</p>
<p><img src="https://winking324.github.io/post-images/1561190019003.png" alt=""></p>
</li>
<li>
<p>选择刚创建的虚拟机，并点击设置；</p>
<p><img src="https://winking324.github.io/post-images/1561190028782.png" alt=""></p>
</li>
<li>
<p>修改网络配置，添加 Host-Only 模式；</p>
<p><img src="https://winking324.github.io/post-images/1561190039617.png" alt=""></p>
</li>
<li>
<p>修改存储配置，添加之前创建的虚拟磁盘；</p>
<p><img src="https://winking324.github.io/post-images/1561190049647.png" alt=""></p>
</li>
<li>
<p>开机并登陆，检查网络和磁盘状态；</p>
<p><img src="https://winking324.github.io/post-images/1561190060306.png" alt=""></p>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[VirtualBox 配置虚拟硬盘]]></title>
        <id>https://winking324.github.io/post/virtualbox-disk</id>
        <link href="https://winking324.github.io/post/virtualbox-disk">
        </link>
        <updated>2018-10-19T06:20:23.000Z</updated>
        <summary type="html"><![CDATA[<p>一般工作环境，不建议与系统环境放在一起。所以我们通过挂载磁盘方式，增加磁盘空间，并设置工作环境。</p>
]]></summary>
        <content type="html"><![CDATA[<p>一般工作环境，不建议与系统环境放在一起。所以我们通过挂载磁盘方式，增加磁盘空间，并设置工作环境。</p>
<!-- more -->
<h1 id="1-创建虚拟硬盘">1 创建虚拟硬盘</h1>
<ol>
<li>
<p>关机已经打开的虚拟机；</p>
</li>
<li>
<p>点击设置，并进入存储页面，并选择添加虚拟硬盘；</p>
<p><img src="https://winking324.github.io/post-images/1561184554078.png" alt=""></p>
</li>
<li>
<p>选择创建新的虚拟盘；</p>
<p><img src="https://winking324.github.io/post-images/1561184568359.png" alt=""></p>
</li>
<li>
<p>选择类型，并继续；</p>
<p><img src="https://winking324.github.io/post-images/1561184581108.png" alt=""></p>
</li>
<li>
<p>选择分配模式，并继续；</p>
<p><img src="https://winking324.github.io/post-images/1561184593217.png" alt=""></p>
</li>
<li>
<p>选择存储位置，并调整大小，点击创建；</p>
<p><img src="https://winking324.github.io/post-images/1561184603974.png" alt=""></p>
</li>
<li>
<p>创建成功；</p>
<p><img src="https://winking324.github.io/post-images/1561184615522.png" alt=""></p>
</li>
</ol>
<h1 id="2-磁盘分区">2 磁盘分区</h1>
<ol>
<li>
<p>开机并登录系统；</p>
<p><img src="https://winking324.github.io/post-images/1561184641855.png" alt=""></p>
</li>
<li>
<p>查看当前磁盘信息；</p>
<p><img src="https://winking324.github.io/post-images/1561184651517.png" alt=""></p>
</li>
<li>
<p>操作对应的磁盘，输入 m 查看帮助；</p>
<p><img src="https://winking324.github.io/post-images/1561184660552.png" alt=""></p>
</li>
<li>
<p>支持的磁盘操作；</p>
<p><img src="https://winking324.github.io/post-images/1561184671799.png" alt=""></p>
</li>
<li>
<p>输入 p，查看当前分区；</p>
<p><img src="https://winking324.github.io/post-images/1561184682439.png" alt=""></p>
</li>
<li>
<p>输入 n，创建分区，选择主分区还是扩展分区，默认主分区；</p>
<p><img src="https://winking324.github.io/post-images/1561184693348.png" alt=""></p>
</li>
<li>
<p>选择磁盘分区在该硬盘中的序号；</p>
<p><img src="https://winking324.github.io/post-images/1561184702415.png" alt=""></p>
</li>
<li>
<p>磁盘起始位置；</p>
<p><img src="https://winking324.github.io/post-images/1561184715648.png" alt=""></p>
</li>
<li>
<p>磁盘结束位置；</p>
<p><img src="https://winking324.github.io/post-images/1561184735442.png" alt=""></p>
</li>
<li>
<p>创建分区结束，按 p 显示分区信息；</p>
<p><img src="https://winking324.github.io/post-images/1561184747832.png" alt=""></p>
</li>
<li>
<p>输入 w，保存并退出；</p>
<p><img src="https://winking324.github.io/post-images/1561184761053.png" alt=""></p>
</li>
</ol>
<h1 id="3-格式化分区">3 格式化分区</h1>
<ol>
<li>
<p>格式化创建的分区，并等待格式化完成；</p>
<p><img src="https://winking324.github.io/post-images/1561184771160.png" alt=""></p>
</li>
</ol>
<h1 id="4-挂载硬盘">4 挂载硬盘</h1>
<ol>
<li>
<p>创建 <code>/data</code> 目录；</p>
<p><img src="https://winking324.github.io/post-images/1561184810771.png" alt=""></p>
</li>
<li>
<p>挂载硬盘到 <code>/data</code> 路径下；</p>
<p><img src="https://winking324.github.io/post-images/1561184820459.png" alt=""></p>
</li>
</ol>
<h1 id="5-开机自动挂载硬盘">5 开机自动挂载硬盘</h1>
<ol>
<li>
<p>编辑 <code>/etc/fstab</code> 文件；</p>
<p><img src="https://winking324.github.io/post-images/1561184831895.png" alt=""></p>
</li>
<li>
<p>在文件中，追加以下内容；</p>
<p><img src="https://winking324.github.io/post-images/1561184841113.png" alt=""></p>
</li>
<li>
<p>保存并退出；</p>
</li>
</ol>
]]></content>
    </entry>
</feed>